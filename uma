#!/usr/bin/env python3
# The above shebang line ensures that the script runs with python3 interpreter

# Importing necessary libraries
# openai - an API to connect to OpenAI's language model
# config - a module containing configurations such as API keys
# subprocess - a module for running system commands
# argparse - a module for parsing command line arguments
import openai
import config
import prompts
import subprocess
import argparse
import sys
import os
import requests 

# Setting the API key for OpenAI's API
openai.api_key = config.OPENAI_API_KEY


import tempfile
import time

# Define a fixed file path for the session data
session_duration = 60  # 10 minutes in seconds


# Get the user's home directory
home_dir = os.path.expanduser("~")

# Define the file name
file_name = ".uma_session_data.txt"

# Construct the file path
session_file_path = os.path.join(home_dir, file_name)

# Check if the file exists, and if not, create it with initial content
if not os.path.exists(session_file_path):
    with open(session_file_path, "w") as f:
        f.write("Welcome to Ursa Major Ask\n")


def initialize_session():
    global session_file_path
    if not os.path.exists(session_file_path):
        with open(session_file_path, 'w') as f:
            f.write(f"{time.time()}\n")  # Write the current timestamp as the session start

def check_session():
    with open(session_file_path, 'r+') as f:
        lines = f.readlines()
        session_start_time = float(lines[0].strip())
        # Check if the session is still valid
        if time.time() - session_start_time > session_duration:
            # Session expired, start a new one
            f.seek(0)
            f.write(f"{time.time()}\n")  # Reset the timestamp
            f.truncate()
            return False  # Indicates a new session started
        else:
            return True  # Session is valid


def append_to_transcript(transcript):
    with open(session_file_path, 'r+') as f:
        content = f.read()
        if '\n' in content:
            start_time, existing_transcript = content.split('\n', 1)
        else:
            start_time = content.strip()
            existing_transcript = ""  # No existing transcript

        updated_transcript = (existing_transcript + '\n' + transcript)[-12000:]  # Keep last 12,000 chars
        f.seek(0)
        f.write(start_time + '\n' + updated_transcript)
        f.truncate()


def get_transcript_history():
    if os.path.exists(session_file_path):
        with open(session_file_path, 'r') as f:
            content = f.read()
            _, transcript_history = content.split('\n', 1)
            return transcript_history.strip()
    return ""

def call_gpt(user_prompt, system_prompt):
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
    )
    # Extracting the system's message from the API response
    return response["choices"][0]["message"]["content"]

def detect_script_type(script_text):
    messages = [
        {"role": "system", "content": prompts.script_detector},
        {"role": "user", "content": script_text}
    ]
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
    )
    ai_message = response["choices"][0]["message"]["content"]
    try:
        script_type = ai_message.split(':')[1].strip()
    except IndexError:
        script_type = ai_message
    return script_type

def save_to_file(result1, summary, file_extension):
    file_name = f"{summary}.{file_extension}"
    with open(file_name, 'w') as f:
        f.write(result1)

def strip_triple_backticks(result1):
    return result1.strip('```')

def run_script(filename):
    try:
        subprocess.run(['chmod', '+x', filename], check=True)
        script_path = os.path.join('./', filename)
        result = subprocess.run(script_path, capture_output=True, text=True, check=True)
        print(result.stdout)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print("Script execution failed with error: ", e.returncode)
        print("Error message: ", e.stderr)

def strip_dot(file_extension):
    return file_extension.lstrip('.')

def remove_blank_first_line(result1):
    lines = result1.split('\n')
    if lines[0].strip() == '':
        lines = lines[1:]
    return '\n'.join(lines)

def result_code_cleaning(result):
    result = strip_triple_backticks(result)
    result = remove_blank_first_line(result)
    return remove_first_line_if_not_shebang(result)

def remove_first_line_if_not_shebang(text):
    lines = text.split('\n')
    if not lines[0].startswith("#!/"):
        lines = lines[1:]
    return '\n'.join(lines)

def run_ls_latr():
    ls_latr_command = ["ls", "-latr"]
    ls_latr_output = subprocess.check_output(ls_latr_command, text=True)
    return ls_latr_output

def update_files():
    urls = {
        "uma": "https://raw.githubusercontent.com/UCR-Research-Computing/uma/main/uma",
        "prompts.py": "https://raw.githubusercontent.com/UCR-Research-Computing/uma/main/prompts.py"
    }
    for filename, url in urls.items():
        response = requests.get(url)
        response.raise_for_status()  # Ensure the request was successful
        file_path = os.path.expanduser(f"~/bin/{filename}")
        if os.path.exists(file_path):
            os.remove(file_path)  # Delete the existing file if it exists
        with open(file_path, "w") as file:
            file.write(response.text)
        os.chmod(file_path, 0o755)  # Change file permissions to 755

import tempfile

def save_to_temp_file_with_extension(content, extension):
    # Using NamedTemporaryFile to create a temp file with the correct extension
    # Note: delete=False is used here to prevent the file from being deleted upon close.
    # You should manage the cleanup of this file yourself when it's no longer needed.
    with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix=f'.{extension}') as temp_file:
        temp_file.write(content)
        return temp_file.name  # Returns the full path to the temporary file


import re

def generate_summary_as_filename(original_response, system_prompt):
    # Request a two-word summary from the model
    summary_prompt = f"Summarize the meaning or purpose of the following in four words:\n{original_response}"
    summary_response = call_gpt(summary_prompt, system_prompt).strip()

    # Sanitize the summary to ensure it's safe for use as a file name
    safe_summary = re.sub(r'[^\w\s]', '', summary_response)  # Remove all non-word characters
    safe_summary = safe_summary.replace(' ', '_')  # Replace spaces with underscores

    return safe_summary



def main(args, transcript_from_pipe=None):
        # If there's input from a pipe, use it; otherwise, use the command-line argument
    transcript = transcript_from_pipe if transcript_from_pipe else '\n'.join(args.transcript)
    if args.run:
        transcript += " reply to this request with only the code dont explain anything or but do use the shebang as the first line."
        modified_transcript = "Write a script to " + transcript
        result = call_gpt(modified_transcript, prompts.director)
        clean_result = result_code_cleaning(result)
        file_extension = call_gpt(clean_result, prompts.script_detector)
        stripped_file_extension = strip_dot(file_extension)

        # Generate a summary to use in the file name
        summary = generate_summary_as_filename(clean_result, prompts.director)
        file_name = f"{summary}.{stripped_file_extension}"

        save_to_file(clean_result, summary, stripped_file_extension)
        #file_name = f"run.{stripped_file_extension}"
        run_script(file_name)
        print("completed running: " + file_name)
        exit()
    elif args.write:
        transcript += "reply to script requests with only the code dont explain anything or y the code but do use the shebang as the first line."
        result = call_gpt(transcript, prompts.director)
        clean_result = result_code_cleaning(result)
        file_extension = call_gpt(clean_result, prompts.script_detector)
        stripped_file_extension = strip_dot(file_extension)

                # Generate a summary to use in the file name
        summary = generate_summary_as_filename(clean_result, prompts.director)
        file_name = f"{summary}.{stripped_file_extension}"


        save_to_file(clean_result, summary, stripped_file_extension)
        file_name = f"run.{stripped_file_extension}"
        print("File Written: " + file_name)
        exit()
    elif args.update:
        update_files()
    else:
        #append_to_transcript(transcript)
        #transcript_history = get_transcript_history()
        #print(call_gpt(transcript_history, prompts.director))
        response = call_gpt_with_context(transcript, prompts.director)  # Call GPT with the new question and history as context
        append_to_transcript(response)
        print(response)  # Print only the response to the new question

def summarize_history(history):
    # This is a placeholder function. You would replace the content of this function with an actual API call to a text summarization service.
    summarized_history = "This is a summarized history."  # Replace with actual API response
    return summarized_history

def call_gpt_with_context(transcript, prompts_director):
    # Retrieve the existing transcript history
    transcript_history = get_transcript_history()
    
    # Combine the transcript history with the new question
    #combined_input = f"{transcript_history}\n{transcript}"
    combined_input = f"Context:\n{transcript_history}\n\nQuestion:\n{transcript}"
    
    # Call the GPT model with the combined input
    response = call_gpt(combined_input, prompts.director)
    
    # Return or print the GPT response directly, without the history
    return response

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("transcript", nargs='*', type=str, help="Transcript of the conversation")
    parser.add_argument("-r", "--run", action='store_true', help="Run the generated script")
    parser.add_argument("-w", "--write", action='store_true', help="Write the generated script")
    parser.add_argument("-u", "--update", action='store_true', help="Update Ursa_Major_Ask")
    args = parser.parse_args()
    #main(args)

    # Check for piped input
    if not sys.stdin.isatty():
        # Read the entire piped input
        piped_input = sys.stdin.read().strip()
        main(args, transcript_from_pipe=piped_input)
    else:
        main(args)
